generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

model User {
  id            String      @id @default(uuid())
  name          String
  email         String      @unique
  password      String?
  walletAddress String?     @unique
  createdAt     DateTime    @default(now())
  avatarSeed    String?
  avatarColor   String?
  school        String?
  isSchool      Boolean     @default(false)
  preferences   UserPreferences?
  readingLogs   ReadingLog[]
  PurchasedItems     PurchasedItem[]
  TransactionHistory TransactionHistory[]
  hasOnboarded  Boolean     @default(false)
}

model UserPreferences {
  id            String   @id @default(uuid())
  userId        String   @unique
  genrePrefs    String[]
  reading       String[]
  favorites     String[]
  goal          String?
  notification  Boolean  @default(true)
  darkMode      Boolean  @default(false)
  user          User     @relation(fields: [userId], references: [id])
}

model ReadingLog {
  id          String    @id @default(uuid())
  userId      String
  title        String
  duration    Int
  summary     String
  timestamp   DateTime  @default(now())
  status      LogStatus @default(PENDING)
  validatorId String?
  validator    String?
  logHash      String?
  user        User      @relation(fields: [userId], references: [id])
  reward      TokenReward?
  approvals   Int @default(0)
}

enum LogStatus {
  PENDING
  APPROVED
  REJECTED
}

model TokenReward {
  id         String   @id @default(uuid())
  logId      String   @unique
  tokenType  String  
  tokenValue Int
  contractTx String   
  log        ReadingLog @relation(fields: [logId], references: [id])
}

model StoreItem {
  id          String   @id @default(uuid())
  title       String
  description String
  price       Int      
  quantity    Int
  PurchasedItems   PurchasedItem[]
}

model PurchasedItem {
  id        String     @id @default(uuid())
  userId    String
  itemId    String
  acquiredAt DateTime   @default(now())
  txHash    String
  qrCodeUrl  String?
  user      User       @relation(fields: [userId], references: [id])
  item      StoreItem  @relation(fields: [itemId], references: [id])
}

model TransactionHistory {
  id              String    @id @default(uuid())
  userId          String    
  transactionType TransactionType 
  amount          Int?     
  tokenAddress    String?   
  transactionHash String    @unique 
  blockNumber     Int?      
  timestamp       DateTime  @default(now()) 
  status          TxStatus  @default(PENDING)
  user            User      @relation(fields: [userId], references: [id])

}

enum TransactionType {
  TOKEN_MINT  
  TOKEN_BURN   
  TOKEN_TRANSFER 
  ITEM_PURCHASE 
}

enum TxStatus {
  PENDING
  CONFIRMED
  FAILED
}